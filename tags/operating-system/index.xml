<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Operating System on Untitled Thoughts</title>
    <link>/tags/operating-system/</link>
    <description>Recent content in Operating System on Untitled Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Â©2020 Ryan Ma</copyright>
    <lastBuildDate>Sat, 16 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CS 6200 Week 2 Notes</title>
      <link>/posts/cs6200-week2/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/cs6200-week2/</guid>
      <description>Readings Birrell, Andrew, An Introduction to Programming with Threads.
Paper Summary credit to: christian.thompson@gatech.edu
Threads and Concurrency Process vs Thread Process has its own address space and execution context where threads share the same address space, each thread still has its own execution context.
Benefits of Multithreading  Parallelization of the tasks (on multiple CPUs) achieves speed up Specialization of the tasks can results in execution with hotter cache Less memory intensive compare to splitting the application into different processes More efficient in communication (cheaper IPC)  In a single CPU setup, multithreading can still be value considering when one task is idle and we can context switch to another task as long as the idle time is less than 2 * context switching time</description>
      
    </item>
    
    <item>
      <title>CS 6200 Week 1 Notes</title>
      <link>/posts/cs6200-week1/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/cs6200-week1/</guid>
      <description>C Tutorial Essential C
Pointers and Memory
What is an Operating System An operating system abstract and arbitrary the use of underlying hardware
OS modes OS has two modes, (privileged) kernel mode and (unprivileged) user mode. Kernel mode allows access to hardware while user mode does not. If application tries to access hardware directly, that instruction will be trapped and OS will step in to verify if the instruction should go through or not.</description>
      
    </item>
    
  </channel>
</rss>
